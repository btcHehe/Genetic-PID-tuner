#ifndef POPULATION_HPP
#define POPULATION_HPP

/*
    FILE: Population.hpp
    DESCRIPTION: Class Population definition. Class represents population of genetic algorithms on which genetic operations are performed.
*/

#include <vector>
#include <random>
#include <iostream>
#include <algorithm>
#include <numeric>
#include <gsl/gsl_vector.h>
#include "Entity.hpp"
#include "utils.hpp"

/*! Class implementing population of entities */
class Population {
    public:
        /** @brief - Contructor of class Population; Initializes N entities with random parameters
         * @param Tr_goal - rise time goal value
         * @param Os_goal - overshoot goal value
         * @param T5s_goal - 5% settling time goal value
         * @param N - number of entities to create in population (must be even because of corssing)
         * @param max_random - maximum number that can be generated by rng
         * @param dtime - time step of simulation of closed loop system [s]
         * @param tsim - duration of simulation [s]
         */
        Population(double Tr_goal, double Os_goal, double T5s_goal, int N=50, double max_random=10.0, double dtime=0.01, double tsim=10.0) {
            // error checking
            if (N%2 != 0) {
                throw std::invalid_argument("Odd size of population was set. Even required.");
            }
            this->dist = std::uniform_real_distribution<double>(0.0, max_random);   // initializing distribution object
            // creating entities with random parameters
            for (int i=0; i<N; i++) {
                Entity tmpE;
                double r = this->dist(this->rand_gen);
                tmpE.set_kp(0.1+(r/(1+r)));
                tmpE.set_kd(0.0);
                tmpE.set_ki(0.04+(r/(1+r)));
                this->population.push_back(tmpE);
                this->children.push_back(tmpE);                                     // at the beginning children does not matter; filling for indexing purposes
            }
            this->time_step = dtime;
            this->time_sim = tsim;
            this->goal_parameters.Os = Os_goal;
            this->goal_parameters.Tr = Tr_goal;
            this->goal_parameters.T5s = T5s_goal;
        } /* end of Population() */

        /** @brief - General method for running genetic algorithm. Returns best agent after rep_num algorithm iterations
         * @param rep_num - number of entities to replace
         * @param mutation_chance - probability of mutation happening (default is 10%)
         * @param min_val - minimum random value of mutated variable
         * @param max_val - maximum random value of mutated variable
        */
        Entity find_solution(int rep_num, double mutation_chance=0.1, double min_val=0.0, double max_val=50.0);

        /** @brief - Method implementing entity selection mechanism 
        */
        void selection();

        /** @brief - Method implementing arithmetic crossing of entities in population; returns children of current population */
        void crossing();

        /** @brief - Method implementing equal-value fenotype mutation of entities in population
         * @param mutation_chance - probability of mutation happening (default is 10%)
         * @param min_val - minimum random value of mutated variable
         * @param max_val - maximum random value of mutated variable
         */
        void mutation(double mutation_chance=0.1, double min_val=0.0, double max_val=50.0);

        /** @brief - Method for replacment some entities of previus population with children
         * @param rep_num - number of entities to replace
         */
        void replacement(int rep_num);

        /** @brief - Method filling vector specimen_evaluation with simulation parameters of every specimen group entity */
        void simulate_population();

        /** @brief - Method for finding best entity in population 
         */
        Entity get_best_member();

        /** @brief - Method for calculation mean adaptation measure value 
         */
        double get_mean_adaptation();

        /** @brief - Method for calculating cost value for agent
         * @param agent - member of population
        */
        double get_cost(Entity agent);
    // private:
        std::vector<Entity> population;                             // population of entities
        std::vector<Entity> selected_group;                         // subpopulation of entities selected for reproduction
        std::vector<Entity> children;                               // current population children
        std::vector<double> specimen_evaluation;                    // vector of cost values for every member of population
        std::default_random_engine rand_gen;                        // random entity parameters generator
        std::uniform_real_distribution<double> dist;                // distribution object
        double time_step;                                           // time step of simulation [s]
        double time_sim;                                            // time of whole simulation [s]
        Sim_params goal_parameters;                                 // goal parameters of genetic algorithm
};

#endif